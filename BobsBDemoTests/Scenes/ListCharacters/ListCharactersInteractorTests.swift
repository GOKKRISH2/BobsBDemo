//
//  ListCharactersInteractorTests.swift
//  BobsBDemo
//
//  Created by Gokul Krishna on 08/06/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import BobsBDemo
import XCTest

class ListCharactersInteractorTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: ListCharactersInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupListCharactersInteractor()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupListCharactersInteractor()
  {
    sut = ListCharactersInteractor()
  }
  
  // MARK: Test doubles
  
  class ListCharactersPresentationLogicSpy: ListCharactersPresentationLogic {
    var presentFetchCharactersCalled = false
    
    func presentFetchCharacters(response: ListCharacters.FetchCharacters.Response) {
        presentFetchCharactersCalled = true
    }
  }
    
    class ListCharactersWorkerSpy: ListCharactersWorker {
      // MARK: Method call expectations
      
      var fetchCharactersCalled = false
      
      // MARK: Spied methods
      
        override func fetchCharacters(completionHandler: @escaping ([Character]) -> Void) {
        fetchCharactersCalled = true
            completionHandler([Seeds.Charecters.testCharacter1, Seeds.Charecters.testCharacter2])
      }
    }
  
  // MARK: Tests
  
  func testFetchCharacterShouldAskListCharactersWorkerToFetchCharactersAndPresentersToFormatResult()
  {
    // Given
    let listCharactersPresentationLogicSpy = ListCharactersPresentationLogicSpy()
    sut.presenter = listCharactersPresentationLogicSpy
      
      let lististCharactersWorkerSpy = ListCharactersWorkerSpy(charactersStore: CharacterAPI())
      sut.worker = lististCharactersWorkerSpy
      
    // When
      let request = ListCharacters.FetchCharacters.Request()
    sut.fetchCharacters(request: request)
    
    // Then
      XCTAssert(lististCharactersWorkerSpy.fetchCharactersCalled, "fetchCharacters() should ask the CharacterWorker to fetch result")
    XCTAssertTrue(listCharactersPresentationLogicSpy.presentFetchCharactersCalled, "fetchCharacters() should ask presenter to format characters result")
      
  }
}
