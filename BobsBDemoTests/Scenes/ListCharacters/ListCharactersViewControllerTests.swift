//
//  ListCharactersViewControllerTests.swift
//  BobsBDemo
//
//  Created by Gokul Krishna on 08/06/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import BobsBDemo
import XCTest

class ListCharactersViewControllerTests: XCTestCase {
  // MARK: Subject under test
  
  var sut: ListCharactersViewController!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp() {
    super.setUp()
    window = UIWindow()
    setupListCharactersViewController()
  }
  
  override func tearDown() {
    window = nil
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupListCharactersViewController() {
    
    let storyboard = UIStoryboard(name: "Main", bundle: nil)
      sut = storyboard.instantiateViewController(withIdentifier: "ListCharactersViewController") as? ListCharactersViewController
  }
  
  func loadView() {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: Test doubles
  
    class ListCharactersBusinessLogicSpy: ListCharactersBusinessLogic {
        
    var fetchCharactersCalled = false
    
    func fetchCharacters(request: ListCharacters.FetchCharacters.Request) {
      fetchCharactersCalled = true
    }
  }
    
    class TableViewSpy: UITableView {
        var reloadDataCalled = false
        override func reloadData() {
            reloadDataCalled = true
        }
    }
  
  // MARK: Tests
  
  func testShouldDoSomethingWhenViewIsLoaded() {
    // Given
    let spy = ListCharactersBusinessLogicSpy()
    sut.interactor = spy
    loadView()
      
    // When
    sut.viewDidLoad()
    
    // Then
    XCTAssertTrue(spy.fetchCharactersCalled, "viewDidLoad() should ask the interactor to do something")
  }
  
  func testDisplayfetchCharacters() {
    // Given
    let tableViewSpy = TableViewSpy()
    sut.tableView = tableViewSpy
      let displayCharacter = [ListCharacters.FetchCharacters.ViewModel.DisplayedCharacter(id: "1", name: "test", image: "https://bobsburgers-api.herokuapp.com/images/characters/1.jpg", voicedBy: "test")]
    let viewModel = ListCharacters.FetchCharacters.ViewModel(displayedCharacter: displayCharacter)
    
    // When
    sut.displayFetchCharacters(viewModel: viewModel)
    
    // Then
      XCTAssert(tableViewSpy.reloadDataCalled, "Displaying fetched charecters should reload the table view")
  }
    
    func test_setsTableView() {
        
            _ = sut.view
            
            XCTAssertNotNil(sut.tableView)
        }
    
    func testNumberOfSectionsInTableViewShouldAlwaysBeOne() {
        // Given
        let tableView = UITableView()
        tableView.dataSource = sut
        
        // When
        let numberOfSections = tableView.numberOfSections
        
        // Then
        XCTAssertEqual(numberOfSections, 1, "The number of table view sections should be 1")
    }
    
    func testNumberOfRowInAnySectionShouldEqualNumberOfCharacterToDisplay() {
        // Given
        let tableView = UITableView()
        tableView.dataSource = sut
        let testDisplayedCharacter = [ListCharacters.FetchCharacters.ViewModel.DisplayedCharacter(id: "1", name: "test", image: "https://bobsburgers-api.herokuapp.com/images/characters/1.jpg", voicedBy: "test")]
        sut.displayedCharacters = testDisplayedCharacter
        
        // When
        let numberOfRows = tableView.numberOfRows(inSection: 0)
        
        // Then
        XCTAssertEqual(numberOfRows, testDisplayedCharacter.count, "The number of table view rows should equal the number of orders to display")
    }
    
    func testTableViewCellHasTheExpectedViews() {
        // Given
        _ = sut.view
        let tableView = sut.tableView!
        let testDisplayedCharacter = [ListCharacters.FetchCharacters.ViewModel.DisplayedCharacter(id: "1", name: "test", image: "https://bobsburgers-api.herokuapp.com/images/characters/1.jpg", voicedBy: "test")]
        sut.displayedCharacters = testDisplayedCharacter
        tableView.reloadData()
        
        // When
        let cell = tableView.cellForRow(at: IndexPath(row: 0, section: 0)) as! CharacterTableViewCell
        
        // Then
        XCTAssertNotNil(cell.characterNameLabel, "A label to show character name should be there")
        XCTAssertNotNil(cell.characterImageView,"An image view to show character image should be there")
        XCTAssertNotNil(cell.characterVoiceByLabel,"A label to show character voice by should be there")
    }
    
    func testShouldConfigureTableViewToDisplayOrders() {
        
        // Given
        _ = sut.view
        let tableView = sut.tableView!
        let testDisplayedCharacter = [ListCharacters.FetchCharacters.ViewModel.DisplayedCharacter(id: "1", name: "test", image: "https://bobsburgers-api.herokuapp.com/images/characters/1.jpg", voicedBy: "test voice by")]
        sut.displayedCharacters = testDisplayedCharacter

        tableView.reloadData()
        
        // When
        let cell = tableView.cellForRow(at: IndexPath(row: 0, section: 0)) as! CharacterTableViewCell
        
        // Then
        XCTAssertEqual(cell.reuseIdentifier, "CharacterTableViewCell")
        XCTAssertEqual(cell.characterNameLabel.text, "test")
        XCTAssertEqual(cell.characterVoiceByLabel.text, "test voice by")
        
        // can create different interactor method for fetch image
//        XCTAssertNotNil(cell.characterImageView.image,"An image view to show character image should be there")
    }
}
